"""Visualization Functions
Please note that many parts of this were edited by Claude 3.5 Haiku, and ChatGPT-4o. 
They have been verified to be accurate for this application.
"""
def plot_training_metrics(metrics, save_path='training_metrics.png'):
    """
    Plot training metrics over episodes with threshold indicators
    """
    episodes = np.arange(len(metrics['rewards']))
    
    # Thresholds for each metrics based on requirements
    thresholds = {
        'rewards': 2.0,         # Good reward threshold
        'snr': 10.0,            # Minimum acceptable SNR (dB)
        'latency': 100.0,       # Maximum acceptable latency (ms)
        'throughput': 40.0,     # Minimum acceptable throughput (Mbps)
        'power': 50.0,          # Maximum power limit (W)
        'fairness': 0.7         # Minimum fairness index
    }
    
    plt.figure(figsize=(20, 15))
    
    # Reward Plot
    plt.subplot(3, 2, 1)
    plt.plot(episodes, metrics['rewards'], 'b-')
    plt.axhline(y=thresholds['rewards'], color='purple', linestyle='--', 
                label=f'Threshold: {thresholds["rewards"]}')
    plt.title('Episode Reward')
    plt.xlabel('Episode')
    plt.ylabel('Reward')
    plt.grid(True, alpha=0.3)
    plt.legend()
    
    # SNR Plot
    plt.subplot(3, 2, 2)
    plt.plot(episodes, metrics['snr'], 'g-')
    plt.axhline(y=thresholds['snr'], color='purple', linestyle='--', 
                label=f'Min SNR: {thresholds["snr"]} dB')
    
    # Green/Pink background added here - Generated by Claude 3.5 Haiku
    plt.axhspan(0, thresholds['snr'], alpha=0.2, color='red', label='Below minimum')
    plt.axhspan(thresholds['snr'], max(40, max(metrics['snr'])*1.1), alpha=0.2, color='green', label='Acceptable')
    
    plt.title('Signal-to-Noise Ratio (SNR)')
    plt.xlabel('Episode')
    plt.ylabel('SNR (dB)')
    plt.grid(True, alpha=0.3)
    plt.legend()
    
    # Plot latency
    plt.subplot(3, 2, 3)
    plt.plot(episodes, metrics['latency'], 'r-')
    plt.axhline(y=thresholds['latency'], color='purple', linestyle='--', 
                label=f'Max Latency: {thresholds["latency"]} ms')
    
    # Add green/red background to indicate acceptable/unacceptable regions - Generated by Claude 3.5 Haiku
    plt.axhspan(0, thresholds['latency'], alpha=0.2, color='green', label='Acceptable')
    plt.axhspan(thresholds['latency'], max(150, max(metrics['latency'])*1.1), alpha=0.2, color='red', label='Above maximum')
    
    plt.title('Latency')
    plt.xlabel('Episode')
    plt.ylabel('Latency (ms)')
    plt.grid(True, alpha=0.3)
    plt.legend()
    
    # Plot throughput
    plt.subplot(3, 2, 4)
    plt.plot(episodes, metrics['throughput'], 'c-')
    plt.axhline(y=thresholds['throughput'], color='purple', linestyle='--', 
                label=f'Min Throughput: {thresholds["throughput"]} Mbps')
    
    # Add green/red background to indicate acceptable/unacceptable regions - Generated by Claude 3.5 Haiku
    plt.axhspan(0, thresholds['throughput'], alpha=0.2, color='red', label='Below minimum')
    plt.axhspan(thresholds['throughput'], max(100, max(metrics['throughput'])*1.1), alpha=0.2, color='green', label='Acceptable')
    
    plt.title('Throughput')
    plt.xlabel('Episode')
    plt.ylabel('Throughput (Mbps)')
    plt.grid(True, alpha=0.3)
    plt.legend()
    
    # Plot transmit power
    plt.subplot(3, 2, 5)
    plt.plot(episodes, metrics['power'], 'm-')
    plt.axhline(y=thresholds['power'], color='purple', linestyle='--', 
                label=f'Max Power: {thresholds["power"]} W')
    
    # Add green/red background to indicate acceptable/unacceptable regions  - Generated by Claude 3.5 Haiku
    plt.axhspan(0, thresholds['power'], alpha=0.2, color='green', label='Acceptable')
    plt.axhspan(thresholds['power'], max(80, max(metrics['power'])*1.1), alpha=0.2, color='red', label='Above maximum')
    
    plt.title('Transmit Power')
    plt.xlabel('Episode')
    plt.ylabel('Power (W)')
    plt.grid(True, alpha=0.3)
    plt.legend()
    
    # Plot fairness
    plt.subplot(3, 2, 6)
    plt.plot(episodes, metrics['fairness'], 'y-')
    plt.axhline(y=thresholds['fairness'], color='purple', linestyle='--', 
                label=f'Min Fairness: {thresholds["fairness"]}')
    
    # Add green/red background to indicate acceptable/unacceptable regions  - Generated by Claude 3.5 Haiku
    plt.axhspan(0, thresholds['fairness'], alpha=0.2, color='red', label='Below minimum')
    plt.axhspan(thresholds['fairness'], 1.0, alpha=0.2, color='green', label='Acceptable')
    
    plt.title("Jain's Fairness Index")
    plt.xlabel('Episode')
    plt.ylabel('Fairness')
    plt.grid(True, alpha=0.3)
    plt.legend()
    
    plt.tight_layout()
    plt.savefig(save_path)
    plt.close()
    
    # Plot learning curves
    plt.figure(figsize=(12, 5))
    
    plt.subplot(1, 2, 1)
    plt.plot(episodes, metrics['actor_loss'], 'b-')
    plt.title('Actor Loss')
    plt.xlabel('Episode')
    plt.ylabel('Loss')
    plt.grid(True, alpha=0.3)
    
    plt.subplot(1, 2, 2)
    plt.plot(episodes, metrics['critic_loss'], 'r-')
    plt.title('Critic Loss')
    plt.xlabel('Episode')
    plt.ylabel('Loss')
    plt.grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.savefig('learning_curves.png')
    plt.close()
    
    print(f"Training metrics plots saved to {save_path} and learning_curves.png")
