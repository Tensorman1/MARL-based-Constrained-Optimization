"""This is the Q-Learning Agent Definition"""
class QLearningAgent:
    def __init__(self, n_actions, alpha=0.1, gamma=0.99, epsilon=1.0, epsilon_decay=0.995, epsilon_min=0.01):
        self.n_actions = n_actions
        self.alpha = alpha          # Learning rate
        self.gamma = gamma          # Discount factor (same as MADDPG)
        self.epsilon = epsilon      # Exploration probability
        self.epsilon_decay = epsilon_decay
        self.epsilon_min = epsilon_min
        
        #  Q-table as a defaultdict
        self.Q = defaultdict(lambda: np.zeros(n_actions))
    
    def choose_action(self, state):
        """
        Here an action has been chosen using the epsilon-greedy strategy
        """
        if np.random.rand() < self.epsilon:
            return np.random.randint(self.n_actions)
        else:
            return np.argmax(self.Q[state])
    
    def learn(self, state, action, reward, next_state, done):
        """
         Q-value for the given state and action gets updated here.
        """
        q_predict = self.Q[state][action]
        if done:
            q_target = reward  # Terminal state
        else:
            q_target = reward + self.gamma * np.max(self.Q[next_state])
        self.Q[state][action] += self.alpha * (q_target - q_predict)
    
    def update_epsilon(self):
        """
        Exploration Decay
        """
        self.epsilon = max(self.epsilon_min, self.epsilon * self.epsilon_decay)
