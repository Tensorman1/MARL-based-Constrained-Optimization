class SmallWirelessNetworkEnv:
    def __init__(self, num_base_stations=3, num_users_per_bs=5, grid_size=500):
        self.num_base_stations = num_base_stations
        self.num_users_per_bs = num_users_per_bs
        self.total_users = num_base_stations * num_users_per_bs
        self.grid_size = grid_size
        
        """Physical constants """
        self.MAX_POWER = 50  # in Watts
        self.MIN_SNR = 10    # in dB
        self.MAX_LATENCY = 100  # in ms
        self.PATHLOSS_EXPONENT = 3.5 - #Fairness is a ratio of the same physical quantity. So no units
        self.BANDWIDTH = 20  # in MHz
        self.NOISE_FLOOR = -100  # in dBm
        
        self.max_steps = 100
        self.current_step = 0
        self.done = False
        
        # Initializing the locations
        self._initialize_locations()
        
        # Network state parameters
        self.channel_gains = None
        self.user_demands = None
        self.current_power = np.zeros(num_base_stations)
        self.current_snr = np.zeros(num_base_stations)
        self.current_latency = np.zeros(num_base_stations)
        self.current_throughput = np.zeros(num_base_stations)
        self.current_interference = np.zeros((num_base_stations, num_users_per_bs))
        
        # Per-episode metrics
        self.episode_metrics = {
            'snr': [],
            'latency': [],
            'throughput': [],
            'power': [],
            'fairness': [],
            'rewards': []
        }
        
    def _initialize_locations(self):
        """Initialization of the BS and user locations in a grid """
        bs_spacing = self.grid_size / np.sqrt(self.num_base_stations)
        grid_dim = int(np.ceil(np.sqrt(self.num_base_stations)))
        
        self.bs_locations = []
        for i in range(grid_dim):
            for j in range(grid_dim):
                if len(self.bs_locations) < self.num_base_stations:
                    x = i * bs_spacing + np.random.uniform(-bs_spacing/4, bs_spacing/4)
                    y = j * bs_spacing + np.random.uniform(-bs_spacing/4, bs_spacing/4)
                    self.bs_locations.append((x, y))
        
        # User locations - will be reset for each episode
        self.user_locations = np.zeros((self.num_base_stations, self.num_users_per_bs, 2))
        
    def _calculate_channel_gains(self):
        """Channel gains based on distance and shadowing - same as MADDPG"""
        gains = np.zeros((self.num_base_stations, self.num_base_stations, self.num_users_per_bs))
        
        for bs_idx in range(self.num_base_stations):
            bs_x, bs_y = self.bs_locations[bs_idx]
            
            for user_bs_idx in range(self.num_base_stations):
                for user_idx in range(self.num_users_per_bs):
                    user_x, user_y = self.user_locations[user_bs_idx, user_idx]
                    
                    # Distance
                    distance = np.sqrt((bs_x - user_x)**2 + (bs_y - user_y)**2)
                    # Minimum distance to avoid infinite gain
                    distance = max(distance, 1)
                    
                    # Path loss (dB) = 10 * n * log10(d) where n is path loss exponent
                    path_loss_db = 10 * self.PATHLOSS_EXPONENT * np.log10(distance)
                    
                    # shadow fading (log-normal distribution)
                    shadow_fading_db = np.random.normal(0, 8)  # 8 dB standard deviation
                    
                    # Total loss in dB
                    total_loss_db = path_loss_db + shadow_fading_db
                    
                    # Linear scale gain
                    gain = 10 ** (-total_loss_db / 10)
                    gains[bs_idx, user_bs_idx, user_idx] = gain
        
        return gains
        
    def reset(self):
        self.current_step = 0
        self.done = False
        
        # Clearing per-episode metrics
        for key in self.episode_metrics:
            self.episode_metrics[key] = []
        
        # Random user locations for each BS
        for bs_idx in range(self.num_base_stations):
            bs_x, bs_y = self.bs_locations[bs_idx]
            # Users are distributed within cell radius
            cell_radius = self.grid_size / (2 * np.sqrt(self.num_base_stations))
            
            for user_idx in range(self.num_users_per_bs):
                # Random angle and distance from BS
                angle = np.random.uniform(0, 2 * np.pi)
                distance = np.random.uniform(0, cell_radius)
                
                # Cartesian coordinates
                user_x = bs_x + distance * np.cos(angle)
                user_y = bs_y + distance * np.sin(angle)
                user_x = np.clip(user_x, 0, self.grid_size)
                user_y = np.clip(user_y, 0, self.grid_size)
                
                self.user_locations[bs_idx, user_idx] = [user_x, user_y]
        
        # Channel gains based on locations
        self.channel_gains = self._calculate_channel_gains()
        
        # Random user demands between 0 and 1
        self.user_demands = np.random.uniform(0, 1, (self.num_base_stations, self.num_users_per_bs))

        """Here the metrics have been initialized"""
        self.current_power = np.zeros(self.num_base_stations)
        self.current_snr = np.ones(self.num_base_stations) * self.MIN_SNR
        self.current_latency = np.ones(self.num_base_stations) * self.MAX_LATENCY
        self.current_throughput = np.zeros(self.num_base_stations)
        self.current_interference = np.zeros((self.num_base_stations, self.num_users_per_bs))
        
        # This has not been explicitly used here.
        return self._get_state()
        
    def _get_state(self):
        states = []
        for i in range(self.num_base_stations):
            state = self._get_agent_state(i)
            states.append(state)
        return states
    
    def _get_agent_state(self, bs_idx):
        # 1. Channel gains to own users
        own_channel_gains = self.channel_gains[bs_idx, bs_idx, :]
        
        # 2. Strongest interfering BSs' channel gains to own users
        # For each user, get top 2 interfering BSs (or fewer if there aren't enough BSs)
        interference_gains = []
        for user_idx in range(self.num_users_per_bs):
            interfering_gains = []
            for interfering_bs in range(self.num_base_stations):
                if interfering_bs != bs_idx:
                    interfering_gains.append(self.channel_gains[interfering_bs, bs_idx, user_idx])
            
            interfering_gains.sort(reverse=True)
            top_interferers = min(2, len(interfering_gains))
            interference_gains.extend(interfering_gains[:top_interferers])
            
            if top_interferers < 2:
                interference_gains.extend([0] * (2 - top_interferers))
        
        # 3. User demands
        user_demands = self.user_demands[bs_idx]
        
        # 4. Current metrics for this BS
        metrics = np.array([
            self.current_power[bs_idx], 
            self.current_snr[bs_idx], 
            self.current_latency[bs_idx], 
            self.current_throughput[bs_idx]
        ])
        
        # 5. Current interference levels for users
        interference = self.current_interference[bs_idx]
        
        # Concatenating all to form state
        state = np.concatenate([
            own_channel_gains,
            np.array(interference_gains),
            user_demands,
            metrics,
            interference
        ])
        
        return state
        
    def step(self, actions):
        """
        Now a step has been taken in the environment with the given action.
        
        For SP, actions are a list of [power_setting, bandwidth_setting] for each base station.
        Power is in actual watts (will be converted to normalized range).
        Bandwidth is a distribution over users.
        
        Returns: next_states, rewards, done, info
        """
        self.current_step += 1
        self.done = self.current_step >= self.max_steps
        
        # Ensuring dimensional compatitbility
        actions = np.array(actions).reshape(self.num_base_stations, -1)
        
        # For SP, the actions are:
        # actions[:, 0] = power_allocations in watts
        # actions[:, 1:] = bandwidth_allocations (distribution for each BS's users)
        
        # Power allocations are extracted here
        power_allocations = actions[:, 0]  # Already in watts
        self.current_power = power_allocations
        
        # Bandwidth allocations (should sum to 1 for each BS)
        if actions.shape[1] > 1:  # If bandwidth allocations provided
            bandwidth_allocations = actions[:, 1:].reshape(self.num_base_stations, -1)
            # Ensure they sum to 1
            for bs_idx in range(self.num_base_stations):
                bandwidth_allocations[bs_idx] = bandwidth_allocations[bs_idx] / np.sum(bandwidth_allocations[bs_idx])
        else:
            bandwidth_allocations = np.ones((self.num_base_stations, self.num_users_per_bs)) / self.num_users_per_bs
        
        # SINR for each user
        sinr = np.zeros((self.num_base_stations, self.num_users_per_bs))
        for bs_idx in range(self.num_base_stations):
            for user_idx in range(self.num_users_per_bs):
                # Signal power from serving BS
                signal_power = power_allocations[bs_idx] * self.channel_gains[bs_idx, bs_idx, user_idx]
                
                # Interference power from other BSs
                interference_power = 0
                for interfering_bs in range(self.num_base_stations):
                    if interfering_bs != bs_idx:
                        interference_power += power_allocations[interfering_bs] * self.channel_gains[interfering_bs, bs_idx, user_idx]
                
                # Thermal noise (convert noise floor from dBm to linear)
                noise_power = 10 ** (self.NOISE_FLOOR / 10) / 1000  # Convert to watts
                
                # SINR
                if signal_power > 0:
                    sinr[bs_idx, user_idx] = signal_power / (interference_power + noise_power)
                else:
                    sinr[bs_idx, user_idx] = 0
                    
                # Interference has been stored for state representation
                self.current_interference[bs_idx, user_idx] = interference_power
        
        # Throughput using Shannon's formula
        throughput = np.zeros((self.num_base_stations, self.num_users_per_bs))
        for bs_idx in range(self.num_base_stations):
            for user_idx in range(self.num_users_per_bs):
                # Shannon capacity: B * log2(1 + SINR)
                if sinr[bs_idx, user_idx] > 0:
                    throughput[bs_idx, user_idx] = (
                        self.BANDWIDTH * 1e6 * bandwidth_allocations[bs_idx, user_idx] * 
                        np.log2(1 + sinr[bs_idx, user_idx])
                    ) / 1e6  #  Mbps
        
        # Metrics per BS
        fairness_values = []
        for bs_idx in range(self.num_base_stations):
            # Average SNR in dB
            if np.any(sinr[bs_idx] > 0):
                self.current_snr[bs_idx] = 10 * np.log10(np.mean(sinr[bs_idx]))
            else:
                self.current_snr[bs_idx] = self.MIN_SNR
            
            # Total throughput
            self.current_throughput[bs_idx] = np.sum(throughput[bs_idx])
            
            # Latency (inversely proportional to throughput, higher throughput = lower latency)
            demands_weighted_throughput = np.sum(self.user_demands[bs_idx] * throughput[bs_idx])
            if demands_weighted_throughput > 0:
                self.current_latency[bs_idx] = self.MAX_LATENCY * np.exp(-0.1 * demands_weighted_throughput)
            else:
                self.current_latency[bs_idx] = self.MAX_LATENCY
                
            # Fairness for this BS
            fairness = self._jains_fairness(throughput[bs_idx])
            fairness_values.append(fairness)
        
        # Rewards -  this is again the same as MADDPG
        rewards = []
        for bs_idx in range(self.num_base_stations):
            reward = self._calculate_reward(bs_idx, sinr[bs_idx], throughput[bs_idx])
            rewards.append(reward)
        
        # Here, the per-step metrics for the present episode has been stored
        self.episode_metrics['snr'].append(np.mean(self.current_snr))
        self.episode_metrics['latency'].append(np.mean(self.current_latency))
        self.episode_metrics['throughput'].append(np.mean(self.current_throughput))
        self.episode_metrics['power'].append(np.mean(self.current_power))
        self.episode_metrics['fairness'].append(np.mean(fairness_values))
        self.episode_metrics['rewards'].append(np.mean(rewards))
        
        # Get next state (not used by SP but maintaining consistent interface)
        next_states = self._get_state()
        
        # Additional information which might be useful for constraint tracking
        info = {
            'snr': np.mean(self.current_snr),
            'latency': np.mean(self.current_latency),
            'throughput': np.mean(self.current_throughput),
            'power': np.mean(self.current_power),
            'fairness': np.mean(fairness_values),
            'constraint_violations': {
                'power_violation': 1 if np.mean(self.current_power) > self.MAX_POWER else 0,
                'snr_violation': 1 if np.mean(self.current_snr) < self.MIN_SNR else 0
            }
        }
        
        return next_states, rewards, self.done, info

    def _calculate_reward(self, bs_idx, sinr_values, throughput_values):
        """Reward calculation for a single base station - same as MADDPG"""
        # Normalize metrics to [0,1] range
        snr_norm = (self.current_snr[bs_idx] - self.MIN_SNR) / (40 - self.MIN_SNR)
        snr_norm = np.clip(snr_norm, 0, 1)
        
        latency_norm = (self.MAX_LATENCY - self.current_latency[bs_idx]) / (self.MAX_LATENCY - 5)
        latency_norm = np.clip(latency_norm, 0, 1)
        
        throughput_norm = np.clip(self.current_throughput[bs_idx] / 100, 0, 1)
        
        # Fairness among users (not among base stations)
        fairness = self._jains_fairness(throughput_values)
        
        # Penalties - Intialize at zero.
        power_penalty = 0
        snr_penalty = 0
        
        # Power consumption penalty if exceeding limit
        if self.current_power[bs_idx] > self.MAX_POWER:
            power_penalty = 10 * (self.current_power[bs_idx] - self.MAX_POWER) / self.MAX_POWER
        
        # SNR penalty if below minimum
        if self.current_snr[bs_idx] < self.MIN_SNR:
            snr_penalty = 5 * (self.MIN_SNR - self.current_snr[bs_idx]) / self.MIN_SNR
        
        # Reward components with weights
        reward = (0.3 * snr_norm + 
                  0.25 * latency_norm + 
                  0.25 * throughput_norm + 
                  0.2 * fairness - 
                  power_penalty - 
                  snr_penalty)
        
        return reward
    
    def _jains_fairness(self, rates):
        """ Jain's fairness index for a set of data rates"""
        if np.sum(rates) == 0:
            return 0
        return (np.sum(rates) ** 2) / (self.num_users_per_bs * np.sum(rates ** 2) + 1e-8)
    
    def get_episode_metrics(self):
        """Return average metrics for the entire episode"""
        episode_avg_metrics = {}
        for key in self.episode_metrics:
            if len(self.episode_metrics[key]) > 0:
                episode_avg_metrics[key] = np.mean(self.episode_metrics[key])
            else:
                episode_avg_metrics[key] = 0
        return episode_avg_metrics
